{"ast":null,"code":"import { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Injectable, NgModule, defineInjectable } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nativeFhir = require('fhir.js/src/adapters/native');\nclass FhirService {\n  constructor() {\n    this.api = false;\n    console.log(\"construct FhirService\");\n    this._authenticated = /** @type {?} */new BehaviorSubject(false);\n    this._data = this._data ? this._data : {};\n  }\n  /**\n   * @return {?}\n   */\n  get authenticated() {\n    return this._authenticated.asObservable();\n  }\n  /**\n   * @param {?} namespace\n   * @return {?}\n   */\n  getDataFrom(namespace) {\n    this.confirmNamespace(namespace);\n    return this._data[namespace].asObservable();\n  }\n  /**\n   * @param {?} namespace\n   * @param {?} query\n   * @return {?}\n   */\n  queryInto(namespace, query) {\n    this.confirmNamespace(namespace);\n    /** @type {?} */\n    let performSearch = this.performSearch.bind(this);\n    if (!this.api) {\n      this.authenticate().then(smart => {\n        performSearch(namespace, query);\n      });\n    } else {\n      performSearch(namespace, query);\n    }\n  }\n  /**\n   * @param {?} namespace\n   * @return {?}\n   */\n  confirmNamespace(namespace) {\n    console.log(\"confirmNamespace\");\n    if (!this._data[namespace]) {\n      this._data[namespace] = /** @type {?} */new BehaviorSubject({\n        status: -1\n      });\n    }\n  }\n  /**\n   * @param {?} namespace\n   * @param {?} query\n   * @return {?}\n   */\n  performSearch(namespace, query) {\n    console.log(\"performSearch()\");\n    console.log(this._data);\n    /** @type {?} */\n    let _data = this._data;\n    this.api.search(query).then(function (data) {\n      _data[namespace].next(data);\n    }, function (error) {\n      console.log(error);\n    });\n  }\n  /**\n   * @param {?} config\n   * @return {?}\n   */\n  launch(config) {\n    /** @type {?} */\n    let clientId = config.clientId;\n    /** @type {?} */\n    let secret = config.secret;\n    /** @type {?} */\n    let serviceUri = config.serviceUri ? config.serviceUri : this.getUrlParameter(\"iss\");\n    /** @type {?} */\n    let launchContextId = this.getUrlParameter(\"launch\");\n    /** @type {?} */\n    let scope = config.scope;\n    /** @type {?} */\n    let state = config.state;\n    /** @type {?} */\n    let launchUri = window.location.protocol + \"//\" + window.location.host + window.location.pathname;\n    /** @type {?} */\n    let redirectUri = launchUri.replace(config.launchEndpoint, config.redirectEndpoint);\n    /** @type {?} */\n    let conformanceUri = serviceUri + \"/metadata\";\n    fetch(conformanceUri).then(response => {\n      return response.json();\n    }).then(json => {\n      console.log(json);\n      /** @type {?} */\n      let authUri;\n      /** @type {?} */\n      let tokenUri;\n      // Pull the fhir extension for oauth\n      /** @type {?} */\n      let smartExtension = json.rest[0].security.extension.filter(e => {\n        return e.url === \"http://fhir-registry.smarthealthit.org/StructureDefinition/oauth-uris\";\n      });\n      // Grab the authorize and token urls from the oauth extension\n      smartExtension[0].extension.forEach(arg => {\n        if (arg.url === \"authorize\") {\n          authUri = arg.valueUri;\n        } else if (arg.url === \"token\") {\n          tokenUri = arg.valueUri;\n        }\n      });\n      // store relevant values to state\n      sessionStorage[state] = JSON.stringify({\n        clientId: clientId,\n        secret: secret,\n        serviceUri: serviceUri,\n        redirectUri: redirectUri,\n        tokenUri: tokenUri\n      });\n      // redirect to auth server\n      /** @type {?} */\n      let redirect = authUri + \"?\" + \"response_type=code&\" + \"client_id=\" + encodeURIComponent(clientId) + \"&\" + \"scope=\" + encodeURIComponent(scope) + \"&\" + \"redirect_uri=\" + encodeURIComponent(redirectUri) + \"&\" + \"aud=\" + encodeURIComponent(serviceUri) + \"&\" + \"launch=\" + launchContextId + \"&\" + \"state=\" + state;\n      window.location.href = redirect;\n    });\n  }\n  /**\n   * @return {?}\n   */\n  authenticate() {\n    console.log(\"authenticating\");\n    // get the URL parameters received from the authorization server\n    /** @type {?} */\n    let state = this.getUrlParameter(\"state\");\n    /** @type {?} */\n    let code = this.getUrlParameter(\"code\");\n    // load session variables\n    /** @type {?} */\n    let params = JSON.parse(sessionStorage[state]);\n    /** @type {?} */\n    let tokenUri = params.tokenUri;\n    /** @type {?} */\n    let clientId = params.clientId;\n    /** @type {?} */\n    let secret = params.secret;\n    /** @type {?} */\n    let serviceUri = params.serviceUri;\n    /** @type {?} */\n    let redirectUri = params.redirectUri;\n    return this.sendAuthRequest(code, tokenUri, clientId, redirectUri, serviceUri);\n  }\n  /**\n   * @param {?} code\n   * @param {?} tokenUri\n   * @param {?} clientId\n   * @param {?} redirectUri\n   * @param {?} serviceUri\n   * @return {?}\n   */\n  sendAuthRequest(code, tokenUri, clientId, redirectUri, serviceUri) {\n    /** @type {?} */\n    let promise = fetch(tokenUri, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: new URLSearchParams({\n        code: code,\n        grant_type: \"authorization_code\",\n        redirect_uri: redirectUri,\n        client_id: clientId\n      })\n    }).then(response => response.json()).then(json => {\n      /** @type {?} */\n      let api = this.getApi(serviceUri, {\n        bearer: json.access_token\n      });\n      return api;\n    });\n    return promise;\n  }\n  /**\n   * @param {?} baseUrl\n   * @param {?} auth\n   * @return {?}\n   */\n  getApi(baseUrl, auth) {\n    /** @type {?} */\n    let api = nativeFhir({\n      baseUrl: baseUrl,\n      credentials: 'same-origin',\n      auth: auth\n    });\n    this.api = api;\n    this._authenticated.next(true);\n    return api;\n  }\n  /**\n   * @param {?} param\n   * @return {?}\n   */\n  getUrlParameter(param) {\n    /** @type {?} */\n    const urlParams = new URLSearchParams(window.location.search);\n    /** @type {?} */\n    const paramValue = urlParams.get(param);\n    return paramValue;\n  }\n}\n\n/** @nocollapse */\n\n/** @nocollapse */FhirService.ngInjectableDef = defineInjectable({\n  factory: function FhirService_Factory() {\n    return new FhirService();\n  },\n  token: FhirService,\n  providedIn: \"root\"\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgFhirSmartrModule {}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { FhirService, NgFhirSmartrModule };\n\n//# sourceMappingURL=ng-fhir-smartr.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}