{"ast":null,"code":"(function () {\n  var utils = require('../utils');\n  var CONTAINED = /^#(.*)/;\n  var resolveContained = function (ref, resource) {\n    var cid = ref.match(CONTAINED)[1];\n    var ret = (resource.contained || []).filter(function (r) {\n      return (r.id || r._id) == cid;\n    })[0];\n    return ret && {\n      content: ret\n    } || null;\n  };\n  var sync = function (arg) {\n    var cache = arg.cache;\n    var reference = arg.reference;\n    var bundle = arg.bundle;\n    var ref = reference;\n    if (!ref.reference) {\n      return null;\n    }\n    if (ref.reference.match(CONTAINED)) {\n      return resolveContained(ref.reference, arg.resource);\n    }\n    var abs = utils.absoluteUrl(arg.baseUrl, ref.reference);\n    var bundled = (bundle && bundle.entry || []).filter(function (e) {\n      return e.id === abs;\n    })[0];\n    return bundled || (cache != null ? cache[abs] : void 0) || null;\n  };\n  var resolve = function (h) {\n    return function (args) {\n      var cacheMatched = sync(args);\n      var ref = args.reference;\n      var def = args.defer();\n      if (cacheMatched) {\n        if (!args.defer) {\n          throw new Error(\"I need promise constructor 'adapter.defer' in adapter\");\n        }\n        def.resolve(cacheMatched);\n        return def.promise;\n      }\n      if (!ref) {\n        throw new Error(\"No reference found\");\n      }\n      if (ref && ref.reference.match(CONTAINED)) {\n        throw new Error(\"Contained resource not found\");\n      }\n      args.url = utils.absoluteUrl(args.baseUrl, ref.reference);\n      args.data = null;\n      return h(args);\n    };\n  };\n  module.exports.sync = sync;\n  module.exports.resolve = resolve;\n}).call(this);","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}