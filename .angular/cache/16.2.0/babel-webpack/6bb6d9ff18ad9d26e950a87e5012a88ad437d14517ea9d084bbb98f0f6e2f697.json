{"ast":null,"code":"(function () {\n  var utils = require('../utils');\n  var type = utils.type;\n  var assertArray = utils.assertArray;\n  var assertObject = utils.assertObject;\n  var reduceMap = utils.reduceMap;\n  var identity = utils.identity;\n  var OPERATORS = {\n    $gt: 'gt',\n    $lt: 'lt',\n    $lte: 'lte',\n    $gte: 'gte'\n  };\n  var MODIFIERS = {\n    $asc: ':asc',\n    $desc: ':desc',\n    $exact: ':exact',\n    $missing: ':missing',\n    $null: ':missing',\n    $text: ':text'\n  };\n  var isOperator = function (v) {\n    return v.indexOf('$') === 0;\n  };\n  var expandParam = function (k, v) {\n    return reduceMap(v, function (acc, arg) {\n      var kk, o, res, vv;\n      kk = arg[0], vv = arg[1];\n      return acc.concat(kk === '$and' ? assertArray(vv).reduce(function (a, vvv) {\n        return a.concat(linearizeOne(k, vvv));\n      }, []) : kk === '$type' ? [] : isOperator(kk) ? (o = {\n        param: k\n      }, kk === '$or' ? o.value = vv : (OPERATORS[kk] ? o.operator = OPERATORS[kk] : void 0, MODIFIERS[kk] ? o.modifier = MODIFIERS[kk] : void 0, type(vv) === 'object' && vv.$or ? o.value = vv.$or : o.value = [vv]), [o]) : (v.$type ? res = \":\" + v.$type : void 0, linearizeOne(\"\" + k + (res || '') + \".\" + kk, vv)));\n    });\n  };\n  var handleSort = function (xs) {\n    var i, len, results, x;\n    assertArray(xs);\n    results = [];\n    for (i = 0, len = xs.length; i < len; i++) {\n      x = xs[i];\n      switch (type(x)) {\n        case 'array':\n          results.push({\n            param: '_sort',\n            value: x[0],\n            modifier: \":\" + x[1]\n          });\n          break;\n        case 'string':\n          results.push({\n            param: '_sort',\n            value: x\n          });\n          break;\n        default:\n          results.push(void 0);\n      }\n    }\n    return results;\n  };\n  var handleInclude = function (includes) {\n    return reduceMap(includes, function (acc, arg) {\n      var k, v;\n      k = arg[0], v = arg[1];\n      return acc.concat(function () {\n        switch (type(v)) {\n          case 'array':\n            return v.map(function (x) {\n              return {\n                param: '_include',\n                value: k + \".\" + x\n              };\n            });\n          case 'string':\n            return [{\n              param: '_include',\n              value: k + \".\" + v\n            }];\n        }\n      }());\n    });\n  };\n  var linearizeOne = function (k, v) {\n    if (k === '$sort') {\n      return handleSort(v);\n    } else if (k === '$include') {\n      return handleInclude(v);\n    } else {\n      switch (type(v)) {\n        case 'object':\n          return expandParam(k, v);\n        case 'string':\n          return [{\n            param: k,\n            value: [v]\n          }];\n        case 'number':\n          return [{\n            param: k,\n            value: [v]\n          }];\n        case 'array':\n          return [{\n            param: k,\n            value: [v.join(\"|\")]\n          }];\n        default:\n          throw \"could not linearizeParams \" + type(v);\n      }\n    }\n  };\n  var linearizeParams = function (query) {\n    return reduceMap(query, function (acc, arg) {\n      var k, v;\n      k = arg[0], v = arg[1];\n      return acc.concat(linearizeOne(k, v));\n    });\n  };\n  var buildSearchParams = function (query) {\n    var p, ps;\n    ps = function () {\n      var i, len, ref, results;\n      ref = linearizeParams(query);\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        p = ref[i];\n        results.push([p.param, p.modifier, '=', p.operator, encodeURIComponent(p.value)].filter(identity).join(''));\n      }\n      return results;\n    }();\n    return ps.join(\"&\");\n  };\n  exports._query = linearizeParams;\n  exports.query = buildSearchParams;\n  var mw = require('./core');\n  exports.$SearchParams = mw.$$Attr('url', function (args) {\n    var url = args.url;\n    if (args.query) {\n      var queryStr = buildSearchParams(args.query);\n      return url + \"?\" + queryStr;\n    }\n    return url;\n  });\n  exports.$Paging = function (h) {\n    return function (args) {\n      var params = args.params || {};\n      if (args.since) {\n        params._since = args.since;\n      }\n      if (args.count) {\n        params._count = args.count;\n      }\n      args.params = params;\n      return h(args);\n    };\n  };\n}).call(this);","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}