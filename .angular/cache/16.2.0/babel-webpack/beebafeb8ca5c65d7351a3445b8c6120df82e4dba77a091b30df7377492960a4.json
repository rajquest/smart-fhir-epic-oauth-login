{"ast":null,"code":"/*!\r\n * @name JavaScript/NodeJS Merge v1.2.1\r\n * @author yeikos\r\n * @repository https://github.com/yeikos/js.merge\r\n\r\n * Copyright 2014 yeikos - MIT license\r\n * https://raw.github.com/yeikos/js.merge/master/LICENSE\r\n */\n\n;\n(function (isNode) {\n  /**\r\n   * Merge one or more objects \r\n   * @param bool? clone\r\n   * @param mixed,... arguments\r\n   * @return object\r\n   */\n\n  var Public = function (clone) {\n      return merge(clone === true, false, arguments);\n    },\n    publicName = 'merge';\n\n  /**\r\n   * Merge two or more objects recursively \r\n   * @param bool? clone\r\n   * @param mixed,... arguments\r\n   * @return object\r\n   */\n\n  Public.recursive = function (clone) {\n    return merge(clone === true, true, arguments);\n  };\n\n  /**\r\n   * Clone the input removing any reference\r\n   * @param mixed input\r\n   * @return mixed\r\n   */\n\n  Public.clone = function (input) {\n    var output = input,\n      type = typeOf(input),\n      index,\n      size;\n    if (type === 'array') {\n      output = [];\n      size = input.length;\n      for (index = 0; index < size; ++index) output[index] = Public.clone(input[index]);\n    } else if (type === 'object') {\n      output = {};\n      for (index in input) output[index] = Public.clone(input[index]);\n    }\n    return output;\n  };\n\n  /**\r\n   * Merge two objects recursively\r\n   * @param mixed input\r\n   * @param mixed extend\r\n   * @return mixed\r\n   */\n\n  function merge_recursive(base, extend) {\n    if (typeOf(base) !== 'object') return extend;\n    for (var key in extend) {\n      if (typeOf(base[key]) === 'object' && typeOf(extend[key]) === 'object') {\n        base[key] = merge_recursive(base[key], extend[key]);\n      } else {\n        base[key] = extend[key];\n      }\n    }\n    return base;\n  }\n\n  /**\r\n   * Merge two or more objects\r\n   * @param bool clone\r\n   * @param bool recursive\r\n   * @param array argv\r\n   * @return object\r\n   */\n\n  function merge(clone, recursive, argv) {\n    var result = argv[0],\n      size = argv.length;\n    if (clone || typeOf(result) !== 'object') result = {};\n    for (var index = 0; index < size; ++index) {\n      var item = argv[index],\n        type = typeOf(item);\n      if (type !== 'object') continue;\n      for (var key in item) {\n        if (key === '__proto__') continue;\n        var sitem = clone ? Public.clone(item[key]) : item[key];\n        if (recursive) {\n          result[key] = merge_recursive(result[key], sitem);\n        } else {\n          result[key] = sitem;\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\r\n   * Get type of variable\r\n   * @param mixed input\r\n   * @return string\r\n   *\r\n   * @see http://jsperf.com/typeofvar\r\n   */\n\n  function typeOf(input) {\n    return {}.toString.call(input).slice(8, -1).toLowerCase();\n  }\n  if (isNode) {\n    module.exports = Public;\n  } else {\n    window[publicName] = Public;\n  }\n})(typeof module === 'object' && module && typeof module.exports === 'object' && module.exports);","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}