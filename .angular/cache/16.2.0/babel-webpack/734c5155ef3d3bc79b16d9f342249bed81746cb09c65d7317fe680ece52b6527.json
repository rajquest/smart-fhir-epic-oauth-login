{"ast":null,"code":"(function () {\n  var utils = require(\"./utils\");\n  var M = require('./middlewares/core');\n  var query = require('./middlewares/search');\n  var auth = require('./middlewares/auth');\n  var transport = require('./middlewares/http');\n  var errors = require('./middlewares/errors');\n  var config = require('./middlewares/config');\n  var bundle = require('./middlewares/bundle');\n  var pt = require('./middlewares/patient');\n  var refs = require('./middlewares/references');\n  var url = require('./middlewares/url');\n  var decorate = require('./decorate');\n  var cache = {};\n  var fhir = function (cfg, adapter) {\n    var Middleware = M.Middleware;\n    var $$Attr = M.$$Attr;\n    var $$Method = function (m) {\n      return $$Attr('method', m);\n    };\n    var $$Header = function (h, v) {\n      return $$Attr('headers.' + h, v);\n    };\n    var $Errors = Middleware(errors);\n    var Defaults = Middleware(config(cfg, adapter)).and($Errors).and(auth.$Basic).and(auth.$Bearer).and(auth.$Credentials).and(transport.$JsonData).and($$Header('Accept', cfg.headers && cfg.headers['Accept'] ? cfg.headers['Accept'] : 'application/json')).and($$Header('Content-Type', cfg.headers && cfg.headers['Content-Type'] ? cfg.headers['Content-Type'] : 'application/json'));\n    var GET = Defaults.and($$Method('GET'));\n    var POST = Defaults.and($$Method('POST'));\n    var PUT = Defaults.and($$Method('PUT'));\n    var DELETE = Defaults.and($$Method('DELETE'));\n    var http = transport.Http(cfg, adapter);\n    var Path = url.Path;\n    var BaseUrl = Path(cfg.baseUrl);\n    var resourceTypePath = BaseUrl.slash(\":type || :resource.resourceType\");\n    var searchPath = resourceTypePath;\n    var resourceTypeHxPath = resourceTypePath.slash(\"_history\");\n    var resourcePath = resourceTypePath.slash(\":id || :resource.id\");\n    var resourceHxPath = resourcePath.slash(\"_history\");\n    var vreadPath = resourceHxPath.slash(\":versionId || :resource.meta.versionId\");\n    var resourceVersionPath = resourceHxPath.slash(\":versionId || :resource.meta.versionId\");\n    var ReturnHeader = $$Header('Prefer', 'return=representation');\n    var $Paging = Middleware(query.$Paging);\n    return decorate({\n      conformance: GET.and(BaseUrl.slash(\"metadata\")).end(http),\n      document: POST.and(BaseUrl.slash(\"Document\")).end(http),\n      profile: GET.and(BaseUrl.slash(\"Profile\").slash(\":type\")).end(http),\n      transaction: POST.and(BaseUrl).end(http),\n      history: GET.and(BaseUrl.slash(\"_history\")).and($Paging).end(http),\n      typeHistory: GET.and(resourceTypeHxPath).and($Paging).end(http),\n      resourceHistory: GET.and(resourceHxPath).and($Paging).end(http),\n      read: GET.and(pt.$WithPatient).and(resourcePath).end(http),\n      vread: GET.and(vreadPath).end(http),\n      \"delete\": DELETE.and(resourcePath).and(ReturnHeader).end(http),\n      create: POST.and(resourceTypePath).and(ReturnHeader).end(http),\n      validate: POST.and(resourceTypePath.slash(\"_validate\")).end(http),\n      search: GET.and(resourceTypePath).and(pt.$WithPatient).and(query.$SearchParams).and($Paging).end(http),\n      update: PUT.and(resourcePath).and(ReturnHeader).end(http),\n      nextPage: GET.and(bundle.$$BundleLinkUrl(\"next\")).end(http),\n      prevPage: GET.and(bundle.$$BundleLinkUrl(\"prev\")).end(http),\n      resolve: GET.and(refs.resolve).end(http)\n    }, adapter);\n  };\n  module.exports = fhir;\n}).call(this);","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}