{"ast":null,"code":"(function () {\n  var fhirAPI;\n  var adapter;\n  function getNext(bundle, process) {\n    var i;\n    var d = bundle.data.entry || [];\n    var entries = [];\n    for (i = 0; i < d.length; i++) {\n      entries.push(d[i].resource);\n    }\n    process(entries);\n    var def = adapter.defer();\n    fhirAPI.nextPage({\n      bundle: bundle.data\n    }).then(function (r) {\n      getNext(r, process).then(function (t) {\n        def.resolve();\n      });\n    }, function (err) {\n      def.resolve();\n    });\n    return def.promise;\n  }\n  function drain(searchParams, process, done, fail) {\n    var ret = adapter.defer();\n    fhirAPI.search(searchParams).then(function (data) {\n      getNext(data, process).then(function () {\n        done();\n      }, function (err) {\n        fail(err);\n      });\n    }, function (err) {\n      fail(err);\n    });\n  }\n  ;\n  function fetchAll(searchParams) {\n    var ret = adapter.defer();\n    var results = [];\n    drain(searchParams, function (entries) {\n      entries.forEach(function (entry) {\n        results.push(entry);\n      });\n    }, function () {\n      ret.resolve(results);\n    }, function (err) {\n      ret.reject(err);\n    });\n    return ret.promise;\n  }\n  ;\n  function fetchAllWithReferences(searchParams, resolveParams) {\n    var ret = adapter.defer();\n    fhirAPI.search(searchParams) // TODO: THIS IS NOT CORRECT (need fetchAll, but it does not return a bundle yet)\n    .then(function (results) {\n      var resolvedReferences = {};\n      var queue = [function () {\n        ret.resolve(results, resolvedReferences);\n      }];\n      function enqueue(bundle, resource, reference) {\n        queue.push(function () {\n          resolveReference(bundle, resource, reference);\n        });\n      }\n      function next() {\n        queue.pop()();\n      }\n      function resolveReference(bundle, resource, reference) {\n        var referenceID = reference.reference;\n        fhirAPI.resolve({\n          'bundle': bundle,\n          'resource': resource,\n          'reference': reference\n        }).then(function (res) {\n          var referencedObject = res.data || res.content;\n          resolvedReferences[referenceID] = referencedObject;\n          next();\n        });\n      }\n      var bundle = results.data;\n      bundle.entry && bundle.entry.forEach(function (element) {\n        var resource = element.resource;\n        var type = resource.resourceType;\n        resolveParams && resolveParams.forEach(function (resolveParam) {\n          var param = resolveParam.split('.');\n          var targetType = param[0];\n          var targetElement = param[1];\n          var reference = resource[targetElement];\n          if (type === targetType && reference) {\n            var referenceID = reference.reference;\n            if (!resolvedReferences[referenceID]) {\n              enqueue(bundle, resource, reference);\n            }\n          }\n        });\n      });\n      next();\n    }, function () {\n      ret.reject(\"Could not fetch search results\");\n    });\n    return ret.promise;\n  }\n  ;\n  function decorate(client, newAdapter) {\n    fhirAPI = client;\n    adapter = newAdapter;\n    client[\"drain\"] = drain;\n    client[\"fetchAll\"] = fetchAll;\n    client[\"fetchAllWithReferences\"] = fetchAllWithReferences;\n    return client;\n  }\n  module.exports = decorate;\n}).call(this);","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}