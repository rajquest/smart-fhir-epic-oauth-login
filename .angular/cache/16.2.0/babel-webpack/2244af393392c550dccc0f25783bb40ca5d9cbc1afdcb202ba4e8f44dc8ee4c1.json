{"ast":null,"code":"var mkFhir = require('../fhir');\n\n// Fetch Helper JSON Parsing\nfunction parseJSON(response) {\n  // response.json() throws on empty body\n  return response.text().then(function (text) {\n    return text.length > 0 ? JSON.parse(text) : \"\";\n  });\n}\n\n// Fetch Helper for Status Codes\nfunction checkStatus(httpResponse) {\n  return new Promise(function (resolve, reject) {\n    if (httpResponse.status < 200 || httpResponse.status > 399) {\n      reject(httpResponse);\n    }\n    resolve(httpResponse);\n  });\n}\n\n// Build a backwards compatiable defer object\nvar defer = function () {\n  var def = {};\n  def.promise = new Promise(function (resolve, reject) {\n    def.resolve = resolve;\n    def.reject = reject;\n  });\n  return def;\n};\n\n// Build Adapter Object\nvar adapter = {\n  http: function (args) {\n    var url = args.url;\n    var debug = args.debug;\n\n    // The arguments passed in aligh with the fetch option names.\n    // There are are few extra values, but fetch will ignore them.\n    var fetchOptions = args;\n\n    // Pass along cookies\n    fetchOptions.credentials = args.credentials || '';\n\n    // data neeeds to map to body if data is populated and this is not a GET or HEAD request\n    if (!['GET', 'HEAD'].includes(fetchOptions.method) && fetchOptions.data) {\n      fetchOptions.body = fetchOptions.data;\n    }\n    debug && console.log(\"DEBUG[native](fetchOptions)\", fetchOptions);\n    return new Promise(function (resolve, reject) {\n      var returnableObject = {};\n      fetch(url, fetchOptions).then(function (response) {\n        debug && console.log(\"DEBUG[native](response)\", response);\n        // This object is in the shape required by fhir.js lib\n        Object.assign(returnableObject, {\n          status: response.status,\n          headers: response.headers,\n          config: args\n        });\n        return response;\n      }).then(checkStatus).then(parseJSON).then(function (fhirObject) {\n        // Merge the\n        Object.assign(returnableObject, {\n          data: fhirObject\n        });\n        debug && console.log('DEBUG[native]: (success response)', returnableObject); // eslint-disable-line\n        resolve(returnableObject);\n      }).catch(function (error) {\n        Object.assign(returnableObject, {\n          error: error\n        });\n        debug && console.log('DEBUG[native]: rejecting fetch promise');\n        reject(returnableObject);\n      });\n    });\n  }\n};\nvar buildfhir = function buildfhir(config) {\n  // debugger;\n  return mkFhir(config, adapter);\n};\nbuildfhir.defer = defer;\nmodule.exports = buildfhir;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}